#include <iostream>								//подключение заголовочного файла iostream, для вывода информации на экран
#include "Date.h"								//подключение заголовочного файла Date.h, описывающего пользовательский класс

using namespace std;							//использование пространство имён std

template <class T> class queue {				//объявление шаблона класса queue
private:										
	int size;									//параметр size, хранящий размер очереди
	int N = 0;									//параметра N, хранящий кол-во элементов в очереди
	T* data;									//параметр data - указатель на очередь 
public:											
	queue(int n) {								//объявление конструктора очереди с аргументом n - размер очереди
		data = new T[n];						//создание массива типа T размерностью n
		size = n;								//помещаем в параметр size переданный размер массива
	}											//
	~queue() {									//объявление деконструктора очереди
		delete[] data;							//выгрузка очереди
	}											//
	queue& operator=(const queue& ochered) {	//перегрузка оператора =
		cout << "\nОчередь создана" << endl;	
		if (&ochered == this) return *this;
	}											
	void Show() {								//функция вывода Show
		cout << "Содержание очереди -> ";		//вывод сообщения "Содержание очереди -> " 
		for (int i = 0; i < N; i++) {			//цикл от 0 до N-1 - кол-во элементов
			cout << data[i] << " ";				//вывод i-го элемента очереди 
		}													
		cout << endl;							//переход на новую строку
	}
	void operator +(T a) {						//перегрузка оператора + (добавление нового элемента)
		if (N < size) {							//если текущее кол-во элементов меньше размера очереди
			if (N > 0)							//если в очереди есть элементы
				for (int i = N; i > 0; i--) {	///цикл смещения элементов в очереди на 1 вправо
					data[i] = data[i - 1];		///
				}
			data[0] = a;						//присвоение первым элементом в очереди переданного элемента а
			N++;								//увеличение кол-ва элементов на 1
			cout << "\nЭлемент " << a << " добавлен в очередь" << endl; //вывод сообщения о добавлении элемента а
		}
		else {									//если текущее кол-во элементов больше или равно размера очереди
			cout << "\nЭлемент " << a << " не добавлен, т.к. очередь переполнен." << endl; //вывод сообщения о не добавлении элемента а
		}
		Show();									//вывод очереди
	}
	void operator -() {							//перегрузка оператора - (удаление элемента из очереди)
		if (N != 0) {							//если кол-во элементов не 0
			N--;								//уменьшаем кол-во элементов на 1
			cout << "\nЭлемент удален из очереди" << endl;	//выводим сообщение об удалении
		}
		else {									//если кол-во элементов равно 0
			cout << "\nЭлемент не удален, т.к. очередь пуста." << endl; //вывод сообщения о не удалении элемента
		}
		Show();									//вывод очереди
	}
	void operator --() {						//перезрузка оператора -- (проверка пуста ли очередь)
		if (N == 0) {							//если кол-во очереди равно 0
			cout << "\nОчередь пустая" << endl; //вывод сообщения, что очередь пуста
			Show();								//вывод очереди
		}
		else {									//если кол-вл элементов не равно 0
			cout << "\nОчередь не пустая" << endl; //вывод сообщения, что очередь не пустая
		}
	}
};